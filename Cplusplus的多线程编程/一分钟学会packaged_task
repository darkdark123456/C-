/*
 * @author: MENG ZHEN CHUAN
 * @date: Date
 * @description: HADOOP Project
 * @method: note
 */

#include <future>
#include <iostream>
#include <thread>
#include <functional>
#include <utility>
#include <chrono>

void Worker(std::future<int>& output) {
	std::packaged_task<int(bool&)> Task([](bool& done) ->int { done = true;
        for (size_t i = 0; i < 5; i++){
            std::cout<<"cost "<<i<<"ms"<<std::endl;
            std::this_thread::sleep_for(std::chrono::seconds(1));
        }
        return 1;
    });
	auto fut = Task.get_future();
	bool done = false;
	Task.make_ready_at_thread_exit(done);
	std::cout << "woker done " << done << std::endl;
	auto status = fut.wait_for(std::chrono::seconds(0));
	if (status == std::future_status::timeout) {
		std::cout << "woker: result is not ready" << std::endl;
	}
	output = std::move(fut);
}

void Function4() {
	std::future<int> result;
	std::thread thd1(Worker, std::ref(result));
	thd1.join();
    auto status=result.wait_for(std::chrono::seconds(0));
    if(status==std::future_status::ready){
        std::cout<<" main: result is ready "<<std::endl;
    }

}

int main(int argc, char const *argv[])
{
    Function4();

    return 0;
}
