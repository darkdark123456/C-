 /*一分钟学会jthead*/

 /**
  * jthead 与thead的最大不同就是它的对象在销毁时自动join()，在c++11无法编译jthread
 */
#include <iostream>
#include <utility>
#include <thread>
#include <chrono>

std::chrono::duration<int> duration(1);

void Function1(int n) {
    for (size_t i = 0; i < 5; i++) {
        std::cout << "thread1 executing " << std::endl;
        ++n;
        std::this_thread::sleep_for(duration);
    }

}

void Function2(int& n) {
    for (size_t i = 0; i < 5; i++) {
        std::cout << "thread2 excuting " << std::endl;
        ++n;
        std::this_thread::sleep_for(duration);
    }
}


class Foo {
    public:
        int n = 0;
    public:
        void function() {
            for (size_t i = 0; i < n; i++) {
                std::cout << "thread3 excuting" << std::endl;
                ++n;
                std::this_thread::sleep_for(duration);
        }

    }
};


class Bar {
    public:
        int n = 0;
    public:
        void operator()() {
            for (size_t i = 0; i < 5; i++) {
                n++;
                std::cout << "thread4 excuting " << std::endl;
                std::this_thread::sleep_for(duration);
        }
    }
};


int Function() {
    int n = 0;
    Foo foo;
    Bar bar;
    std::thread thd1;
    std::thread thd2(Function1, n + 1);
    std::thread thd3(Function2, std::ref(n));
    thd2.join();
    thd3.join();
    return 1;
}
