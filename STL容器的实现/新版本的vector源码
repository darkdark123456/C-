#include <iostream>
#include <memory>
#include <exception>

using std::size_t;
using std::allocator;
using std::uninitialized_fill_n;
using std::uninitialized_copy;
using std::copy;
using std::uninitialized_copy_n;
using std::destroy_at;
using std::destroy_n;

// struct IteratorAccessException : public std::exception{
//     IteratorAccessException(): std::exception("Iterator Access Exception",1){

//     }

//     IteratorAccessException(const char* const _Message) : std::exception(_Message,1){

//     }

// };





template<typename T,typename Alloc=std::allocator<T>>
class Vector{
public:
    typedef T value_type;
    typedef T* iterator;
    typedef T& reference;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
private:
    iterator start;
    iterator finish;
    iterator end_of_element;
public:
    explicit Vector() : start(0),finish(0),end_of_element(0){}
    explicit Vector(size_type n,const T& element){

        fill_initialize(n,element);
    }

    explicit Vector(size_type n){
        
        fill_initialize(n,T());
    }

    ~Vector(){free();}
    explicit Vector(const Vector& rhs)=default;
    explicit Vector(Vector&& rhs)=default;
public:
    void  operator=(const Vector& rhs){};
    void  operator=(Vector&& rhs){};
private:
    inline void fill_initialize(size_type n,const T& element);
    inline void free();
public:
    inline void insert(iterator postion,const T& element);
    inline void insert(iterator postion,size_type n,const T& element);
    inline void insert(const T& element);
    inline void insert(iterator first,iterator last);
private:
    inline void insert_aux(iterator postion,const T& element);
public:
    inline size_type size() const {return end_of_element-start;}
    inline size_type capacity() const {return finish-start;}
public:
    inline iterator begin() {return start;}
    inline iterator end()   {return end_of_element;}
    inline reference operator[](size_type i) {return*(start+i);}
public:
    inline iterator erase(iterator postion);
    inline iterator erase(iterator first,iterator last);
    inline void clear(){erase(begin(),end());}
public: 
    inline void push_back(const T& element);
    inline void pop_back();
    inline void front(){return *begin();}
    inline void back() {return *(end()-1);}
public:
    friend std::ostream& operator<<(std::ostream& os,Vector<T>& rhs){

        for(auto iterator=rhs.begin();iterator!=rhs.end();iterator++){
            os<<*iterator<<" ";
        }
        return os;
    }
};


template<typename T,typename Alloc>
void Vector<T,Alloc>::fill_initialize(size_type n,const T& element){
    start=(Alloc()).allocate(n); // 得到的这片内存是未初始化的
    uninitialized_fill_n(start,n,element);
    finish=start+n;
    end_of_element=finish;
}


template<typename T,typename Alloc>
void Vector<T,Alloc>::free(){
    if(start==finish){
        return ;
    }
    std::destroy_n(start,end_of_element-start);
    (Alloc()).deallocate(start,finish-start);
}

template<typename T,typename Alloc>
void Vector<T,Alloc>::insert_aux(iterator postion,const T& element){
    // 用到辅助插入时 此时postion==finish 没有未初始化的干净的内存空间可以用了
    const size_type old_size=(finish-start);
    const size_type element_num=(end_of_element-start);
    const size_type new_size=old_size==0 ? 1 : 3*old_size;
    iterator new_start=(Alloc()).allocate(new_size);
    iterator new_end_of_element=new_start;
    iterator new_finish=new_start;
    std::uninitialized_copy(start,end_of_element,new_start);
    new_end_of_element=new_end_of_element+element_num;
    new_finish=new_finish+new_size;
    
    std::destroy(start,end_of_element);
    (Alloc()).deallocate(start,finish-start);
    
    start=new_start;
    end_of_element=new_end_of_element;
    finish=new_finish;
    
    postion=end_of_element;
    (Alloc()).construct(postion,element);
    ++end_of_element;
    ++postion;
}


template<typename T,typename Alloc>
void Vector<T,Alloc>::insert(iterator postion,size_type n,const T& element){
    if(postion!=end_of_element){

        return ;
    }

    if((finish-end_of_element)>n){
        std::uninitialized_fill_n(end_of_element,n,element);
        end_of_element+=n;
    }
    else{
        // 现有的空间不够了
        size_type old_size=finish-start;
        size_type element_num=end_of_element-start;
        size_type new_size=old_size+std::max(old_size,n);
        iterator  new_start=(Alloc()).allocate(new_size);
        iterator  new_finish=new_start;
        iterator  new_end_of_element=new_start;
        std::uninitialized_copy_n(start,element_num,new_start);
        postion=new_start+element_num;
        std::uninitialized_fill_n(postion,n,element);
        postion+=n;
        new_end_of_element=postion;
        new_finish+=new_size;
        std::destroy_n(start,element_num);
        (Alloc()).deallocate(start,old_size);
        start=new_start;
        end_of_element=new_end_of_element;
        finish=new_finish;
    }
}


template<typename T,typename Alloc>
void Vector<T,Alloc>::insert(iterator postion,const T& element){
    
    if(postion!=end_of_element){

        return ;// 插入位置不对 什么也不做
    }

    if(postion!=finish){

        (Alloc()).construct(postion,element);
        ++end_of_element;
        ++postion;
    }
    else{
        insert_aux(postion,element);
    }   
}


template<typename T,typename Alloc>
void Vector<T,Alloc>::insert(const T& element){
    
    insert(end_of_element,element); // 等价于往end_of_element后面插入元素
}


template<typename T,typename Alloc>
void Vector<T,Alloc>::insert(iterator first,iterator last){
    if(last<=first){ return ;}

    for(;first!=last;first++){ insert(*first);}
}



template<typename T,typename Alloc>
typename Vector<T,Alloc>::iterator Vector<T,Alloc>::erase(iterator postion){
    if(postion>=end_of_element){

        return postion; //试图释放未初始化完后的元素
    }
    if(postion+1==end_of_element){
        std::destroy_at(postion);
        --end_of_element;
    }
    else{
        std::destroy_at(postion);
        std::copy(postion+1,end_of_element,postion);//前移
        --end_of_element;
    }
    return postion;//postion指向已经删除后的相邻的下一个元素
}


template<typename T,typename Alloc>
typename Vector<T,Alloc>::iterator Vector<T,Alloc>::erase(iterator first,iterator last){

    if(first==start && last==end_of_element){
        std::destroy(first,last);
    }
    else{
        std::destroy(first,last); //消除这些元素 让内存处于最干净的状态
        std::copy(last,end_of_element,first); 
        std::destroy(last,end_of_element);
        end_of_element=first+(end_of_element-last);
    }


}

template<typename T,typename Alloc>
void Vector<T,Alloc>::push_back(const T& element){
    insert(element);
}



template<typename T,typename Alloc>
void Vector<T,Alloc>::pop_back(){

    erase(*(end()-1));

}




int main(){

    ::Vector<int> vec(3);
    std::cout<<vec.size()<<std::endl;   
    vec.insert(5);
    vec.insert(6);
    std::cout<<vec.size()<<std::endl;

    std::cout<<vec.capacity()<<std::endl;
    
    ::Vector<int> vec2;
    std::cout<<"vec2 size"<<vec2.size()<<std::endl;
    vec2.insert(7);
    std::cout<<"vec2 size"<<vec2.capacity()<<std::endl;
    vec2.insert(90);
    std::cout<<"vec2 size"<<vec2.capacity()<<std::endl;

    vec2.insert(990);
    std::cout<<"vec2 size"<<vec2.capacity()<<std::endl;
    vec2.insert(1000);
    std::cout<<"vec2 size"<<vec2.capacity()<<std::endl;
 
    std::cout<<vec2<<std::endl;
 
    int arr[7]={1,2,3,4,5,6,7};
    vec2.insert(arr,arr+7);
    std::cout<<vec2<<std::endl;
    return 1;
}
